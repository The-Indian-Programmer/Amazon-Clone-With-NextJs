import Header from "./components/Header/Header";
import Head from "next/head";
import Image from "next/image";
import ReactStars from "react-rating-stars-component";
import { StarIcon } from "@heroicons/react/solid";
import { useSelector, useDispatch } from "react-redux";
import { addToCart, removeFromCart } from "../store/index";
import { toast, snackbar } from "tailwind-toast";
import { useSession } from "next-auth/client";
import Script from "next/script";
import { loadStripe } from "@stripe/stripe-js";
import axios from "axios";
import { useState } from "react";
import { db } from "../firebase";
// whsec_ry4ZIWTDONiMa5GZ9Xdl0Iz1rcyv3Uz5
const Basket = () => {
  const Basket = useSelector((state) => state.basket);
  const dispatch = useDispatch();
  const [session, loading] = useSession();
  const [loader, setLoading] = useState(false);
  let amount = 0;
  Array.from(Basket).map((item) => {
    amount = amount + item.price;
  });
  const removeitem = async (product) => {
    const removed = await dispatch(removeFromCart(product));
    if (removed) {
      toast()
        .success("Ok ! ", "Item was removed.")
        .with({
          // shape: "pill",
          duration: 4000,
          speed: 1000,
          positionX: "end",
          positionY: "top",
          color: "bg-blue-400",
          fontColor: "white",
          fontTone: 200,
        })
        .show();
    } else {
      toast()
        .success("Sorry ! ", "Can't remove item.")
        .with({
          // shape: "pill",
          duration: 4000,
          speed: 1000,
          positionX: "end",
          positionY: "top",
          color: "bg-red-400",
          fontColor: "white",
          fontTone: 200,
        })
        .show();
    }
  };

  const stripePromise = loadStripe(`${process.env.STRIPE_PUBLIC_KEY}`);

  const checkoutSession = async () => {
    setLoading(true);
    const stripe = await stripePromise;
    const checkoutSession = await axios.post("./api/create-checkout-session", {
      items: Basket,
      email: session.user.email,
    });

    const result = await stripe.redirectToCheckout({
      sessionId: checkoutSession.data.id,
    });

    if (result.error) {
      alert(result.error.message);
      console.log("error found in basket");
    }
    setLoading(false);
  };
  return (
    <div className="Basket">
      <Head>
        <title>Basket</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css"
          rel="stylesheet"
        />
        <link
          rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"
        />
      </Head>
      <Script
        async
        src="https://cdnjs.cloudflare.com/ajax/libs/vanilla-tilt/1.7.0/vanilla-tilt.min.js"
        strategy="beforeInteractive"
      />

      <main>
        <Header />

        <div
          style={{ marginTop: "6rem" }}
          className="Basket_container grid md:grid-cols-3 mt-5  lg:grid-cols-3 xl:grid-cols-3 grid-flow-row xl:grid-flow-col lg:grid-flow-col md:grid-flow-col"
        >
          <div className="Basket lg:col-span-2 md:col-span-2 xl:col-span-2 2xl:col-span-2 3xl:col-span-2 mx-5 my-2">
            <Image
              src="https://links.papareact.com/ikj"
              width={1020}
              height={220}
            ></Image>
            {Basket.length == 0 ? (
              <h1 className="text-xl">Your Basket is empty</h1>
            ) : (
              ""
            )}
            {Basket.map((product) => {
              return (
                <div
                  key={product.id}
                  data-tilt
                  data-tilt-reverse="true"
                  className="lg:m-4 px-5 py-5 shadow-md grid my-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-3 grid-flow-row xl:grid-flow-col lg:grid-flow-col md:grid-flow-col bg-white"
                >
                  {/* <!-- Card Image --> */}
                  <div className=" flex justify-center items-center lg:col-span-1 md:col-span-1 xl:col-span-1 2xl:col-span-1 3xl:col-span-1">
                    <Image
                      className="w-44 items-center"
                      src={product.image}
                      width={200}
                      height={200}
                      objectFit="contain"
                    ></Image>
                  </div>
                  {/* <!-- Card Content --> */}
                  <div className="p-4 lg:col-span-2 md:col-span-2 xl:col-span-2 2xl:col-span-2 3xl:col-span-2">
                    <h3 className="font-medium text-gray-600 text-lg my-2 uppercase">
                      {product.title}
                    </h3>
                    <p className="price mb-3">
                      <span className="font-bold text-lg">$ </span>
                      {product.price} Only
                    </p>
                    <p className="text-justify">
                      {product.description.substring(0, 200)}....
                    </p>
                    <div className="mt-5">
                      <button
                        onClick={() => removeitem(product)}
                        className="bg-yellow-500 hover:bg-yellow-400  py-2 px-3 font-semibold hover:text-white bg-gray-400 text-gray-100"
                      >
                        Remove From Cart
                      </button>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
          <div className="checkout col-span-1 mx-3my-5">
            <div className="rounded overflow-hidden  bg-white  shadow-lg">
              <div className="px-6 py-4">
                <div className="font-bold text-xl mb-2">
                  Subtotal {Basket.length} Items
                </div>
                <p className="text-gray-700 text-base text-lg">
                  Total Amount :
                  <b className="text-2xl"> &#8377; {amount.toFixed(2)}</b>
                </p>
                <i>100% Secure Payment</i>
              </div>
              <div className="px-6 pt-4 pb-2">
                <button
                  role="link"
                  onClick={() => checkoutSession()}
                  disabled={!session}
                  className={`btncheckout w-full mb-3  ${
                    !session
                      ? "bg-gray-400 hover:bg-gray-300 cursor-not-allowed disabled:opacity-50"
                      : loader
                      ? "bg-blue-500 hover:bg-blue-400"
                      : "bg-yellow-500 hover:bg-yellow-400"
                  }  rounded-lg  py-3`}
                >
                  {!session
                    ? "SignIn To Checkout"
                    : loader
                    ? "Processing..."
                    : "Proceed To Pay"}
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Basket;
